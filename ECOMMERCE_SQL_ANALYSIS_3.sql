USE MAVENFUZZYFACTORY;

SELECT * FROM WEBSITE_SESSIONS;

-- Q1) FINDING TOP TRAFFIC SOURCES TO NARROW DOWN OUR FOCUS ON THE SOURCES WHERE MOST TRAFFIC COMES FROM, 
-- THIS HELPS US UNDERSTAND THE CURRENT TRAFFIC BREAKDOWN
SELECT 
	UTM_SOURCE,
    UTM_CAMPAIGN,
    HTTP_REFERER,
    COUNT(*) AS SESSIONS
FROM WEBSITE_SESSIONS
WHERE CREATED_AT < '2012-04-12'
GROUP BY 1,2,3
ORDER BY 4 DESC;
-- OBSERVATIONS -> GSEARCH NONBRAND GETS US THE MOST SESSIONS -> IT'S A GOOD USE OF OUR TIME IF WE FOCUS ON OPTIMIZING THIS SOURCE & CAMPAIGN COMBINATION

-- Q2) THE OWNER OF THE MARKETING CHANNELS ARE ALWAYS CURIOUS ON WHETHER THEIR BIDS ARE BRINGING US THE VALUE AS INCREASED REVENUE OR NOT
-- HENCE IT IS A GOOD IDEA TO EXPLORE CONVERSION RATES FOR EACH OF THE SOURCE AND CAMPAIGN COMBINATIONS TO SEE WHICH BRINGS THE MOST VALUE FOR OUR DOLLAR SPEND
-- SELECT * FROM ORDERS;-- 
SELECT 
	W.UTM_SOURCE,
    W.UTM_CAMPAIGN,
    COUNT(W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(O.ORDER_ID) AS ORDERS,
    COUNT(O.ORDER_ID)*100/COUNT(W.WEBSITE_SESSION_ID) AS SESSIONS_TO_ORDER_RATE
FROM WEBSITE_SESSIONS W
LEFT JOIN ORDERS O 
-- Left join here because we want to consider total sessions and as we know not all sessions have orders, if we change it to inner CVR will be 100% always
ON O.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
WHERE W.CREATED_AT < '2012-04-14'
GROUP BY 1,2
ORDER BY 5 DESC;
-- observations - LOOKS LIKE WE ARE NOT GETTING MUCH OUT OF AD SPEND ON GSEARCH NONBRAND ALTHOUGH IN REAL WORLD CASE 
-- WHETHER THIS CONVERSION RATE IS ACCEPTABLE OR NOT CAN BE DECIDED BY STAKEHOLDERS AND HOW MUCH THEY PAY FOR THOSE CHANNELS TO MAKE SENSE OF THE NUMBERS,
-- THE NEXT STEPS INVOLVE IN FLOWING OUR MONEY TO CHANNELS WHICH ARE DOING BETTER THAN OTHERS(AS DEPICTED BY CONVERSION RATE) TO GET MOST VALUE OF SPENDS 

########### BID OPTIMIZATION ########### 
-- GSEARCH NONBRAND WERE BID DOWN ON 15th APRIL 2012 AFTER OUR ANALYSIS, 
-- NOW WE NEED TO OBSERVE IF THE TRAFFIC COMING FROM GSEARCH NONBRAND HAS AN EFFECT OF THE BID DOWN?

-- Q) THE MARKETING DIRECTOR IS INTERESTED IN LOOKING AT PATTERNS OF WEEKLY VOLUME
--  POST THE BID DOWN AND TILL 10th MAY 2012


SELECT
	MIN(DATE(CREATED_AT)) AS WEEK_START_DATE,
    COUNT(WEBSITE_SESSION_ID) AS SESSIONS
FROM WEBSITE_SESSIONS
WHERE UTM_CAMPAIGN = 'nonbrand' 
AND UTM_SOURCE = 'gsearch' 
AND DATE(CREATED_AT) < '2012-05-10'
GROUP BY WEEK(CREATED_AT);

/* 
OBSERVATIONS - WE SEE THAT THE VOLUME COMING FROM GSEARCH NONBRAND HAS DROPPED BY 200-300 SESSIONS EACH WEEK
WE NEED TO FIND A WAY TO OPTIMIZE THIS CHANNEL AS WITH BIDDING DOWN, THE VOLUMES DROP WHICH ISN'T GOOD FOR OUR BUSINESS
*/
    
/* 
NEXT STEPS -> LET'S TRY TO FIND WHAT CAN BE OPTIMIZED FOR GSEARCH-NONBRAND COMBINATION, 
IS THE CONVERSION RATE FOR EACH DEVICE SIMILAR? 
AS CURRENTLY WE ARE NOT TREATING SESSIONS FROM DIFFERENT DEVICE TYPES DIFFERENTLY 
WHICH MEANS WE ARE BIDDING THE SAME FOR SESSIONS COMING FROM MOBILE AND DESKTOP
REQUESTED ON -> 11 MAY 2012
*/
-- Q) THE MARKETING DIRECTOR IS INTERESTED IN LOOKING AT CONV RATE FOR NONBRAND GSEARCH FOR ALL DEVICES

SELECT 
	W.DEVICE_TYPE,
    COUNT(W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(O.ORDER_ID) AS ORDERS,
	COUNT(O.ORDER_ID)*100/COUNT(W.WEBSITE_SESSION_ID) AS ORDER_CONV_RT
FROM WEBSITE_SESSIONS W
LEFT JOIN ORDERS O
ON W.WEBSITE_SESSION_ID = O.WEBSITE_SESSION_ID
WHERE W.CREATED_AT < '2012-05-11' AND UTM_CAMPAIGN = 'nonbrand' AND UTM_SOURCE ='gsearch'
GROUP BY 1;
/*
OBSERVATIONS -> SO WE SEE THAT MAIN CAUSE DRIVING THE CONVERSION RATE DOWN WAS SESSIONS FROM MOBILE WHILE THERE'S STILL 
SCOPE FOR IMPROVEMENT IN DESKTOP SESSIONS BUT MOBILE SESSIONS DEFINITELY NEEDS TO BE BID DOWN TO OPTIMIZE COSTS
AND BID UP FOR DESKTOP SESSIONS
*/

-- Q) THE MARKETING DIRECTOR IS INTERESTED IN LOOKING AT PATTERNS OF WEEKLY VOLUME FOR BOTH DEVICES TO SEE 
-- THE IMPACT OF BID CHANGES FROM OUR LAST ANALYSIS (THEY IMPLEMENTED NEW BIDS ON 19TH MAY 2012)
-- REQUESTED ON -> 9th JUNE 2012 (ALSO REQUESTED TO SHOW TREND STARTING FROM 15th APR 2012)

SELECT 
	MIN(DATE(CREATED_AT)) AS WEEK_START,
    COUNT(CASE WHEN DEVICE_TYPE = 'mobile' THEN WEBSITE_SESSION_ID ELSE NULL END) AS FROM_MOBILE,
    COUNT(CASE WHEN DEVICE_TYPE = 'desktop' THEN WEBSITE_SESSION_ID ELSE NULL END) AS FROM_DESKTOP
FROM WEBSITE_SESSIONS 
WHERE CREATED_AT BETWEEN '2012-04-15' AND '2012-06-09' 
AND UTM_CAMPAIGN = 'nonbrand' AND UTM_SOURCE ='gsearch'
GROUP BY 
		YEAR(CREATED_AT),
        WEEK(CREATED_AT);
/*
OBSERVATIONS -> SO WE SEE THAT BIDDING UP FOR DESKTOP DEFINITELY YIELDS IN MORE SESSIONS FROM DESKTOP 
AND SINCE THEY ARE OF BETTER QUALITY(AS PER ORDER CONVERSION RATE) THIS COULD YIELD MORE REVENUE FOR OUR BUSINESS
*/

############## WEBSITE CONTENT ANALYSIS #####################

-- LET'S CHECK THE MOST VIEWED PAGES (REQUESTED ON JUNE 9th,2012)
-- (IDEA IS THOSE PAGE SHOULD BE PERFECT IN APPEARANCE AS THIS IS VIEWED BY A LARGE AUDIENCE AND THIS SETS THE BRAND IMAGE)
-- SELECT * FROM WEBSITE_PAGEVIEWS
SELECT 
	PAGEVIEW_URL,
    COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSIONS
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT < '2012-06-09'
GROUP BY 1
ORDER BY 2 DESC;

/* 
Q) IT'S A GOOD IDEA TO IDENTIFY THE LANDING PAGE OF OUR WEBSITE AS THIS IS THE FIRST PAGE A VIEWER SEES
AND THE WHOLE EXPERIENCE TILL BILLING STARTS HERE
A focused and compelling landing page can significantly improve conversion rates 
AND HELPS IN increasing the likelihood of engagement
(REQUESTED ON 12th JUNE 2012)
*/
WITH FIRST_PAGE AS 
(
SELECT 
	WEBSITE_SESSION_ID,
    MIN(WEBSITE_PAGEVIEW_ID) AS PAGE_ID
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT < '2012-06-12'
GROUP BY 1
)
SELECT 
	P.PAGEVIEW_URL,
    COUNT(F.WEBSITE_SESSION_ID) AS SESSIONS
FROM FIRST_PAGE F 
LEFT JOIN WEBSITE_PAGEVIEWS P 
ON P.WEBSITE_PAGEVIEW_ID = F.PAGE_ID
GROUP BY 1;

/*
OBSERVATIONS- SEEMS LIKE FOR ALL THE SESSIONS THE FIRST PAGE VIEWED IS HOME PAGE WHICH GIVES US DIRECTION 
ON WHERE SHOULD WE IMPROVE UPON
*/

################# LANDING PAGE ANALYSIS #################
/* 
HERE WE WILL ANALYSE IF OUR LANDING PAGES ARE COMPELLING ENOUGH, 
USUALLY WE RUN MULTIPLE VERSIONS OF LANDING PAGES TO TEST WHICH ONE HAS A LOWER BOUNCE RATE
(THIS KPI TELLS IF VIEWERS OF WEBSITE GOES TO ANOTHER PAGE AFTER VIEWING THE LANDING PAGE OR NOT)
*/
SELECT * FROM WEBSITE_PAGEVIEWS;

WITH FIRST_PAGE_ID AS 
(
SELECT 
	WEBSITE_SESSION_ID,
    MIN(WEBSITE_PAGEVIEW_ID) AS FIRST_PAGE_ID
    FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT BETWEEN '2014-01-01' AND '2014-02-01'
GROUP BY 1
)
,
FIRST_PAGE_WITH_PAGEURL AS
(
SELECT 
	W.PAGEVIEW_URL,
    F.*
FROM FIRST_PAGE_ID F
LEFT JOIN WEBSITE_PAGEVIEWS W
ON W.WEBSITE_PAGEVIEW_ID = FIRST_PAGE_ID
) 
,
BOUNCE_SESSIONS AS
(
SELECT
	FP.*,
    COUNT(W.WEBSITE_SESSION_ID) AS PAGES_FOR_SESSION_ID
FROM FIRST_PAGE_WITH_PAGEURL FP
LEFT JOIN WEBSITE_PAGEVIEWS W
ON W.WEBSITE_SESSION_ID = FP.WEBSITE_SESSION_ID
GROUP BY FP.WEBSITE_SESSION_ID
HAVING COUNT(W.WEBSITE_SESSION_ID) = 1
)
SELECT 
	W.PAGEVIEW_URL,
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS TOTAL_SESSIONS,
    COUNT(DISTINCT B.WEBSITE_SESSION_ID) AS TOTAL_BOUNCES,
    COUNT(DISTINCT B.WEBSITE_SESSION_ID)*100/COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS BOUNCE_RATE
FROM WEBSITE_PAGEVIEWS W
LEFT JOIN BOUNCE_SESSIONS B
ON W.WEBSITE_SESSION_ID = B.WEBSITE_SESSION_ID
WHERE W.CREATED_AT BETWEEN '2014-01-01' AND '2014-02-01'
GROUP BY 1;


# 2nd APPROACH

SELECT * FROM WEBSITE_PAGEVIEWS;

WITH FIRST_PAGE AS 
(
	SELECT
		WEBSITE_SESSION_ID,
        MIN(WEBSITE_PAGEVIEW_ID) AS LANDING_PAGE_ID,
        COUNT(WEBSITE_PAGEVIEW_ID) AS TOTAL_PAGES_VIEWED
	FROM WEBSITE_PAGEVIEWS
    WHERE CREATED_AT BETWEEN '2014-01-01' AND '2014-02-01' # ARBITRARY DATE RANGE
    GROUP BY 1
)
,
LANDING_WITH_PAGEVIEW AS
(
	SELECT 
		F.*,
		P.PAGEVIEW_URL AS LANDING_PAGE
    FROM FIRST_PAGE F
    INNER JOIN WEBSITE_PAGEVIEWS P
    ON F.LANDING_PAGE_ID = P.WEBSITE_PAGEVIEW_ID
)
SELECT 
	LANDING_PAGE,
	COUNT(DISTINCT WEBSITE_SESSION_ID) AS TOTAL_SESSIONS,
	COUNT(DISTINCT CASE WHEN TOTAL_PAGES_VIEWED = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS BOUNCED_SESSIONS,
    ROUND((COUNT(DISTINCT CASE WHEN TOTAL_PAGES_VIEWED = 1 THEN WEBSITE_SESSION_ID ELSE NULL END)*100) / COUNT(DISTINCT WEBSITE_SESSION_ID),2) AS BOUNCE_RATE
FROM LANDING_WITH_PAGEVIEW
GROUP BY 1
ORDER BY 4 DESC ;

/* 
Q) SINCE IN THE LAST ANALYSIS WE SAW THAT ALL OUR TRAFFIC TILL 12TH JUNE LANDED ON "/home" PAGE, 
IT WOULD BE REALLY HELPFUL IF WE COULD GET AN UNDERSTANDING OF THE BOUNCE RATES FOR THIS PAGE
(REQUESTED ON 14th JUNE 2012)
*/

WITH PAGES_VIEWED AS 
(
	SELECT 
		WEBSITE_SESSION_ID,
		COUNT(WEBSITE_PAGEVIEW_ID) AS TOTAL_PAGES_VIEWED
	FROM WEBSITE_PAGEVIEWS	
	WHERE CREATED_AT < '2012-06-14'
	GROUP BY 1
)
SELECT 
	COUNT(WEBSITE_SESSION_ID) AS TOTAL_SESSIONS,
    COUNT(CASE WHEN TOTAL_PAGES_VIEWED = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS BOUNCED_SESSIONS,
    COUNT(CASE WHEN TOTAL_PAGES_VIEWED = 1 THEN WEBSITE_SESSION_ID ELSE NULL END)*100/COUNT(WEBSITE_SESSION_ID) AS BOUNCE_RATE
FROM PAGES_VIEWED ;

/*
OBSERVATION - ALMOST 60% BOUNCE RATE IS PRETTY HIGH BOUNCE RATE AND HAS A LOT OF AREA OF IMPROVEMENT
*/ 

/*
Q) POST OUR ANLYSIS WEBSITE MANAGER CREATED ANOTHER LANDING PAGE TO TEST BOUNCE RATES FOR THE NEW PAGE AND TO CHECK IF IT IS ANY BETTER 
ITS NOW TIME FOR US TO DO THE COMPARISON BETWEEN THE TWO LANDING PAGES
(REQUESTED ON 28TH JULY 2012)
*/ 

-- FOR A FAIR COMPARISON WE SHOULD ONLY COMPARE BOUNCE RATES FOR THE TWO LANDING PAGES WHEN WE STARTED GETTING TRAFFIC FOR NEW PAGE "/lander-1"
-- SO LET'S FIND OUT WHEN DID WE OBSERVE THE FIRST TRAFFIC FOR THIS NEW LANDING PAGE

SELECT 
	MIN(WEBSITE_PAGEVIEW_ID)
FROM WEBSITE_PAGEVIEWS
WHERE PAGEVIEW_URL = '/lander-1';
-- LET'S USE THE ABOVE CODE AS A SUBQUERY TO FILTER DATA

WITH FIRST_PAGE AS (
	SELECT 
		P.WEBSITE_SESSION_ID,
		MIN(P.WEBSITE_PAGEVIEW_ID) AS LANDING_PAGE_ID,
        COUNT(P.WEBSITE_PAGEVIEW_ID) AS PAGES_VIEWED
	FROM WEBSITE_PAGEVIEWS P 
    INNER JOIN WEBSITE_SESSIONS S
    ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
    WHERE WEBSITE_PAGEVIEW_ID >
		(
		SELECT 
			MIN(WEBSITE_PAGEVIEW_ID)
		FROM WEBSITE_PAGEVIEWS
		WHERE PAGEVIEW_URL = '/lander-1'
        ) AND P.CREATED_AT < '2012-07-28' AND S.UTM_SOURCE = 'gsearch' AND S.UTM_CAMPAIGN = 'nonbrand'
        AND P.CREATED_AT>'2012-06-19' AND P.CREATED_AT < '2012-07-28'
	GROUP BY 1
)
,
FIRST_PAGE_WITH_URL AS (
SELECT 
	F.*,
    P.PAGEVIEW_URL AS LANDING_PAGE
FROM FIRST_PAGE F
INNER JOIN WEBSITE_PAGEVIEWS P 
ON F.LANDING_PAGE_ID = P.WEBSITE_PAGEVIEW_ID
)
-- ,
-- TOTAL_SESSION AS

SELECT 
	LANDING_PAGE,
    COUNT(distinct WEBSITE_SESSION_ID) AS TOTAL_SESSIONS,
    COUNT(distinct CASE WHEN PAGES_VIEWED <= 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS BOUNCED_SESSIONS,
    ROUND((COUNT(CASE WHEN PAGES_VIEWED <= 1 THEN WEBSITE_SESSION_ID ELSE NULL END)*100)/COUNT(WEBSITE_SESSION_ID),2) AS BOUNCE_RATE
FROM FIRST_PAGE_WITH_URL
GROUP BY 1 ;

/*
OBSERVATION - WE CAN SEE THE NEW LANDING PAGE HAS A LOWER BOUNCE RATE WHICH IS IMPROVEMENT FROM THE LAST 
*/

/*
Q) POST OUR ANLYSIS WEBSITE MANAGER ROUTED ALL THE TRAFFIC TO '\lander-1' SINCE IT WAS PERFORMING BETTER THAN THE OLD LANDING PAGE,
WEBSITE MANAGER WISHES TO LOOK AT THE WEEKLY TRAFFIC FOR BOTH LANDING PAGES SINCE 1ST JUNE FOR NONBRAND GSEARCH TRAFFIC TO CHECK IF 
THE TRAFFIC IS ROUTED CORRECTLY ALONG WITH OVERALL BOUNCE RATES TRENDED WEEKLY 
ITS NOW TIME FOR US TO DO THE COMPARISON BETWEEN THE TWO LANDING PAGES
(REQUESTED ON 31ST AUG 2012)
*/

CREATE TEMPORARY TABLE LANDING_PAGE_W_URL
WITH LANDING_PAGE AS(
SELECT 
	P.WEBSITE_SESSION_ID,
    MIN(P.WEBSITE_PAGEVIEW_ID) AS LANDING_PAGE_ID
FROM WEBSITE_PAGEVIEWS P 
INNER JOIN WEBSITE_SESSIONS S
ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE S.UTM_SOURCE = 'gsearch' AND S.UTM_CAMPAIGN = 'nonbrand'
        AND P.CREATED_AT>='2012-06-01' AND P.CREATED_AT < '2012-08-31'
GROUP BY 1
)
SELECT 
	L.*,
    P.PAGEVIEW_URL AS LANDING_URL
FROM LANDING_PAGE L
INNER JOIN WEBSITE_PAGEVIEWS P
ON P.WEBSITE_PAGEVIEW_ID = L.LANDING_PAGE_ID;

-- SELECT * FROM LANDING_PAGE_W_URL; 

CREATE TEMPORARY TABLE BOUNCED_SESSIONS
SELECT 
	P.WEBSITE_SESSION_ID,
    COUNT(P.WEBSITE_PAGEVIEW_ID) AS PAGES_VIEWED 
FROM WEBSITE_PAGEVIEWS P 
INNER JOIN WEBSITE_SESSIONS S
ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE S.UTM_SOURCE = 'gsearch' AND S.UTM_CAMPAIGN = 'nonbrand'
        AND P.CREATED_AT>='2012-06-01' AND P.CREATED_AT < '2012-08-31'
GROUP BY 1
HAVING PAGES_VIEWED = 1;


-- SELECT * FROM BOUNCED_SESSIONS; 

CREATE TEMPORARY TABLE LANDING_PAGE_W_URL_CREATED_AT
SELECT 
	P.CREATED_AT,
    L.*,
    B.WEBSITE_SESSION_ID AS BOUNCED_SESSION_ID
FROM LANDING_PAGE_W_URL L 
INNER JOIN WEBSITE_PAGEVIEWS P 
ON P.WEBSITE_PAGEVIEW_ID = L.LANDING_PAGE_ID
LEFT JOIN BOUNCED_SESSIONS B
ON B.WEBSITE_SESSION_ID = L.WEBSITE_SESSION_ID;

-- SELECT * FROM LANDING_PAGE_W_URL_CREATED_AT;

SELECT 
	MIN(DATE(CREATED_AT)) AS WEEK_START,
    COUNT(CASE WHEN LANDING_URL = '/home' THEN WEBSITE_SESSION_ID ELSE NULL END) AS HOME_SESSIONS,
    COUNT(CASE WHEN LANDING_URL = '/lander-1' THEN WEBSITE_SESSION_ID ELSE NULL END) AS LANDER1_SESSIONS,
    ROUND(
		(COUNT(BOUNCED_SESSION_ID)*100)/COUNT(WEBSITE_SESSION_ID),
		2) AS BOUNCE_RATE
	FROM LANDING_PAGE_W_URL_CREATED_AT
GROUP BY WEEK(CREATED_AT)
ORDER BY 1;
	
######################### CONVERSION FUNNEL ANALYSIS #########################

/*
Q) BUSINESS WOULD WANT TO KNOW AT WHAT PAGE DO WE LOSE MOST OF CUSTOMERS FROM OUR NEW LANDING PAGE 
ALL THE WAY TO THANK YOU FOR YOUR ORDER PAGE
(REQUESTED ON 5TH SEP 2012,ALSO USE DATA STARTING 5TH AUG 2012)
*/

SELECT * FROM WEBSITE_SESSIONS;

-- LET'S FIRST GET ALL THE PAGES THAT WERE SEEN IN THIS TIME
SELECT 
    DISTINCT PAGEVIEW_URL
FROM WEBSITE_PAGEVIEWS 
WHERE CREATED_AT BETWEEN '2012-08-05' AND '2012-09-05' ;

/* 
OUTPUT - WE SEE ALL THESE PAGES

'/billing'
'/cart'
'/home'
'/lander-1'
'/products'
'/shipping'
'/thank-you-for-your-order'
'/the-original-mr-fuzzy'

*/

-- WE CAN NOW PASS THIS AS A SUBQUERY IN WHERE CONDITION 

CREATE TEMPORARY TABLE FUNNEL_WITH_FLAGS
SELECT 
	P.WEBSITE_SESSION_ID,
    P.PAGEVIEW_URL,
    P.CREATED_AT,
    
    CASE WHEN P.PAGEVIEW_URL = '/lander-1' THEN 1 ELSE 0 END AS LANDER_1_FLAG,
	CASE WHEN P.PAGEVIEW_URL = '/products' THEN 1 ELSE 0 END AS PRODUCTS_FLAG,
	CASE WHEN P.PAGEVIEW_URL = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS MRFUZZY_FLAG,
    CASE WHEN P.PAGEVIEW_URL = '/cart' THEN 1 ELSE 0 END AS CART_FLAG,
    CASE WHEN P.PAGEVIEW_URL = '/shipping' THEN 1 ELSE 0 END AS SHIPPING_FLAG,
    CASE WHEN P.PAGEVIEW_URL = '/billing' THEN 1 ELSE 0 END AS BILLING_FLAG,
	CASE WHEN P.PAGEVIEW_URL = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS THANKYOU_FLAG
    
FROM WEBSITE_PAGEVIEWS P 
RIGHT JOIN WEBSITE_SESSIONS S
ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE P.CREATED_AT BETWEEN '2012-08-05' AND '2012-09-05' AND S.UTM_SOURCE = 'gsearch' AND S.UTM_CAMPAIGN = 'nonbrand'
AND P.PAGEVIEW_URL IN (SELECT DISTINCT PAGEVIEW_URL FROM WEBSITE_PAGEVIEWS WHERE CREATED_AT > '2012-08-05' AND CREATED_AT < '2012-09-05' )
AND P.PAGEVIEW_URL != '/home' -- THIS IS ADDED AS FROM ABOVE "/home" WILL BE FETCHED FROM THE SUBQUERY, WHICH WE WANT TO DISCARD AS WE ARE CONSIDERING FUNNEL FROM /lander-1
ORDER BY 1,3;

CREATE TEMPORARY TABLE FUNNEL_COUNTS 
WITH FLAGS_FOR_SESSION AS 
(
	SELECT 
		WEBSITE_SESSION_ID,
		
		MAX(LANDER_1_FLAG) AS LANDER_1_FLAG,
		MAX(PRODUCTS_FLAG) AS PRODUCTS_FLAG,
		MAX(MRFUZZY_FLAG) AS MRFUZZY_FLAG,
		MAX(CART_FLAG) AS CART_FLAG,
		MAX(SHIPPING_FLAG) AS SHIPPING_FLAG,
		MAX(BILLING_FLAG) AS BILLING_FLAG,
		MAX(THANKYOU_FLAG) AS THANKYOU_FLAG
		
	FROM FUNNEL_WITH_FLAGS
	GROUP BY 1
)
SELECT 
	SUM(LANDER_1_FLAG) AS LANDER_1_FLAG,
    SUM(PRODUCTS_FLAG) AS PRODUCTS_FLAG,
    SUM(MRFUZZY_FLAG) AS MRFUZZY_FLAG,
    SUM(CART_FLAG) AS CART_FLAG,
    SUM(SHIPPING_FLAG) AS SHIPPING_FLAG,
    SUM(BILLING_FLAG) AS BILLING_FLAG,
    SUM(THANKYOU_FLAG) AS THANKYOU_FLAG
FROM FLAGS_FOR_SESSION ;
    

-- LET'S GET THE CLICK RATE OF EACH OF THE ABOVE PAGES

SELECT 
	PRODUCTS_FLAG*100/LANDER_1_FLAG AS PERC_TO_PRODUCTS,
    MRFUZZY_FLAG*100/PRODUCTS_FLAG AS PERC_TO_MRFUZZY,
    CART_FLAG*100/MRFUZZY_FLAG AS PERC_TO_CART,
    SHIPPING_FLAG*100/CART_FLAG AS PERC_TO_SHIP,
    BILLING_FLAG*100/SHIPPING_FLAG AS PERC_TO_BILLING,
    THANKYOU_FLAG*100/BILLING_FLAG AS PERC_TO_THANKYOU
FROM FUNNEL_COUNTS;

/*
OBSERVATIONS - FROM ABOVE WE CAN SEE A LOT OF PEOPLE ABONDON AT PAGES LANDER-1,MRFUZZY AND BILLING
AS THEY DON'T REACH TO PRODUCTS, CART AND THANKYOU PAGE RESPECTIVELY
THIS GIVE US DIRECTION ON THE AREAS WE COULD IMPROVE PAGES - LANDER-1,MRFUZZY AND BILLING TO GET BETTER CLICK THROUGH RATE
*/


/*
POST OUR ANALYSIS WEBSITE MANAGER UPDATED THE BILLING PAGE IN A HOPE TO INCREASE THE CTR TO THANKYOU PAGE AS THEY THOUGHT
THIS MIGHT BE A REASON FOR CUSTOMERS TO ABANDON AT THE BILLING PAGE

Q) IT WOULD BE A GREAT IDEA TO SEE THE IMPACT OF NEW BILLING PAGE "/billing-2" 
AND COMPARE THE RESULTS WITH CTR OF "/billing" PAGE FOR THE SAME PERIOD FOR A FAIR COMPARISON
(REQUESTED ON 10TH NOV 2012)
*/

-- select * from orders

-- FINDING OUT THE PAGEVIEW_ID FOR THE FIRST TIME THE NEW BILLING PAGE CAME UP LIVE
SELECT
	MIN(WEBSITE_PAGEVIEW_ID) 
FROM WEBSITE_PAGEVIEWS
WHERE PAGEVIEW_URL = '/billing-2';

WITH BILLING_SESSIONS_AND_ORDERS AS
(
	SELECT
		P.WEBSITE_SESSION_ID,
		P.PAGEVIEW_URL,
		O.WEBSITE_SESSION_ID AS ORDER_SESSION_ID
	FROM WEBSITE_PAGEVIEWS P
	LEFT JOIN ORDERS O
	ON O.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
	WHERE P.WEBSITE_PAGEVIEW_ID >= 53550 AND PAGEVIEW_URL IN ('/billing','/billing-2')
	AND P.CREATED_AT < '2012-11-10'
)
SELECT 
	PAGEVIEW_URL,
    COUNT(WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(ORDER_SESSION_ID) AS ORDERS,
    COUNT(ORDER_SESSION_ID)*100/COUNT(WEBSITE_SESSION_ID) AS BILLING_TO_ORDER_RATE
FROM BILLING_SESSIONS_AND_ORDERS
GROUP BY 1;
/*
OBSERVATION - WE CAN CLEARLY SEE THE NEW BILLING PAGE CONVERTING BETTER TO ORDERS
AS A NEXT STEP WE CAN ALSO CHECK IF THE ENGINEERING TEAM HAS MOVED ALL THE UPCOMING TRAFFIC TO THE NEW BILLING PAGE OR NOT FROM THIS POINT
*/

SELECT 
	MIN(DATE(CREATED_AT)) AS WEEK_START_DATE,
	COUNT(CASE WHEN PAGEVIEW_URL='/billing' THEN WEBSITE_SESSION_ID ELSE NULL END) AS OLD_BILLING_SESSION,
    COUNT(CASE WHEN PAGEVIEW_URL='/billing-2' THEN WEBSITE_SESSION_ID ELSE NULL END) AS NEW_BILLING_SESSION
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT > '2012-11-10'
GROUP BY WEEK(CREATED_AT)
ORDER BY 1
;
-- WE CAN SEE THE TRAFFIC WAS SLOWLY MOVED TO THE NEW BILLING PAGE BY 1 JAN 2013

############################################################# MID COURSE PROJECT #############################################################

-- THIS IS FOR A PRESENTATION OF CEO WITH BOARD TO SHOW 8 MONTH'S PROGRESS OF OUR BRAND 

/*
1.Gsearch seems to be the biggest driver of our business. Could you pull
monthly trends for gsearch sessions
and orders so that we can showcase the growth there?
(requested on - 27th nov 2012)
*/

SELECT 
	YEAR(DATE(S.CREATED_AT)) AS YEAR,
	MONTH(DATE(S.CREATED_AT)) AS MONTH,
    COUNT(S.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(O.WEBSITE_SESSION_ID) AS ORDERS
FROM WEBSITE_SESSIONS S
LEFT JOIN ORDERS O 
ON O.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID
WHERE S.UTM_SOURCE = 'gsearch' AND S.CREATED_AT < '2012-11-27' 
GROUP BY 1,2
ORDER BY 1
;


/*
2.Next, it would be great to see a similar monthly trend for Gsearch, but this time
splitting out nonbrand and
brand campaigns separately . I am wondering if brand is picking up at all. If so, this is a good story to tell.
*/

SELECT 
	YEAR(DATE(S.CREATED_AT)) AS YEAR,
	MONTH(DATE(S.CREATED_AT)) AS MONTH,
    
    COUNT(CASE WHEN UTM_CAMPAIGN = 'nonbrand' THEN S.WEBSITE_SESSION_ID ELSE NULL END) AS NONBRAND_SESSIONS,
    COUNT(CASE WHEN UTM_CAMPAIGN = 'brand' THEN S.WEBSITE_SESSION_ID ELSE NULL END) AS BRAND_SESSIONS,
    
    COUNT(CASE WHEN UTM_CAMPAIGN = 'nonbrand' THEN O.WEBSITE_SESSION_ID ELSE NULL END) AS NONBRAND_ORDERS,
    COUNT(CASE WHEN UTM_CAMPAIGN = 'brand' THEN O.WEBSITE_SESSION_ID ELSE NULL END) AS BRAND_ORDERS
    
FROM WEBSITE_SESSIONS S 
LEFT JOIN ORDERS O
ON O.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID
WHERE S.UTM_SOURCE = 'gsearch' AND S.CREATED_AT < '2012-11-27' 
GROUP BY 1,2 
;
/*
BRANDED CAMPAIGN SESSIONS INCREASING IS A GREAT SIGN FOR OUR BUSINESS AS IT MEANS SOMEONE SEARCHED FOR OUR BRAND EXPLICITLY 
*/
 
 /*
 4.I’m worried that one of our more pessimistic board members may be concerned about the large % of traffic from
Gsearch. Can you pull monthly trends for Gsearch, alongside monthly trends for each of our other channels?
 */
-- SELECT DISTINCT UTM_SOURCE FROM WEBSITE_SESSIONS; 
SELECT 
	YEAR(DATE(S.CREATED_AT)) AS YEAR,
	MONTH(DATE(S.CREATED_AT)) AS MONTH,
    
    COUNT(CASE WHEN UTM_SOURCE = 'gsearch' THEN S.WEBSITE_SESSION_ID ELSE NULL END)*100/COUNT(S.WEBSITE_SESSION_ID) AS GSEARCH_SESSIONS,
    COUNT(CASE WHEN UTM_SOURCE = 'bsearch' THEN S.WEBSITE_SESSION_ID ELSE NULL END)*100/COUNT(S.WEBSITE_SESSION_ID) AS BSEARCH_SESSIONS,
    COUNT(CASE WHEN UTM_SOURCE IS NULL AND HTTP_REFERER IS NOT NULL THEN S.WEBSITE_SESSION_ID ELSE NULL END)*100/COUNT(S.WEBSITE_SESSION_ID) AS ORGANIC_TRAFFIC,
    COUNT(CASE WHEN UTM_SOURCE IS NULL AND HTTP_REFERER IS NULL THEN S.WEBSITE_SESSION_ID ELSE NULL END)*100/COUNT(S.WEBSITE_SESSION_ID) AS DIRECT_TYPE_IN_SESSIONS
    
FROM WEBSITE_SESSIONS S
LEFT JOIN ORDERS O 
ON O.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID
WHERE S.CREATED_AT < '2012-11-27' 
GROUP BY 1,2
ORDER BY 1
;

/*
WE CAN CLEARLY SEE OUR BUSINESS INTIALLY WAS DEPENDENT ON GSEARCH BUT THE DEPENDECY IS BEING BROUGHT DOWN 
AS TRAFFIC IS COMING IN FROM OTHER SOURCES AS WELL
ORGANIC AND DIRECT TYPE IN SESSIONS INCREASING IS AN INCREDIBLE SIGN FOR OUR BUSINESS AS THESE ARE THE SESSIONS WE ARE NOT PAYING FOR
AS THERE IS NO CUSTOMER ACQUISITION COST ASSOCIATED TO SUCH SESSIONS AND THIS HELPS WITH THE MARGINS
*/ 

/*
7.For the landing page test you analyzed previously, it would be great to show a
full conversion funnel from each
of the two pages to orders . You can use the same time period you analyzed last time (Jun 19 Jul 28).
*/

CREATE TEMPORARY TABLE CONVERSION_FLAGS 
SELECT 
	WEBSITE_SESSION_ID,
    MAX(SAW_HOMEPAGE) AS SAW_HOMEPAGE,
    MAX(SAW_LANDER_1) AS SAW_LANDER_1,
    MAX(MRFUZZY_FLAG) AS MRFUZZY_FLAG,
    MAX(PRODUCTS_FLAG) AS PRODUCTS_FLAG,
    MAX(CART_FLAG) AS CART_FLAG
FROM 
(
	SELECT 
		S.WEBSITE_SESSION_ID,
		P.PAGEVIEW_URL,
		CASE WHEN PAGEVIEW_URL = '/home' THEN 1 ELSE 0 END AS SAW_HOMEPAGE,
		CASE WHEN PAGEVIEW_URL = '/lander-1' THEN 1 ELSE 0 END AS SAW_LANDER_1,
		CASE WHEN PAGEVIEW_URL = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS MRFUZZY_FLAG,
		CASE WHEN PAGEVIEW_URL = '/products' THEN 1 ELSE 0 END AS PRODUCTS_FLAG,
		CASE WHEN PAGEVIEW_URL = '/cart' THEN 1 ELSE 0 END AS CART_FLAG
	FROM WEBSITE_SESSIONS S 
	LEFT JOIN WEBSITE_PAGEVIEWS P 
	ON P.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID
	WHERE S.CREATED_AT > '2012-06-19' AND S.CREATED_AT < '2012-07-28'
	AND UTM_SOURCE = 'gsearch' AND UTM_CAMPAIGN = 'nonbrand'
	ORDER BY 1
) AS PAGE_FLAGS
GROUP BY 1;

SELECT 
	CASE WHEN SAW_HOMEPAGE = 1 THEN 'SAW_HOME_PAGE'
		 WHEN SAW_LANDER_1 = 1 THEN 'SAW_LANDER_1'
         ELSE 'CHECK_LOGIC'
         END AS PAGE_SEEN,
	SUM(PRODUCTS_FLAG) AS TO_PRODUCTS,
	SUM(MRFUZZY_FLAG) AS TO_MR_FUZZY,
    SUM(CART_FLAG) AS TO_CART_FLAG
FROM CONVERSION_FLAGS
GROUP BY 1;

 ######################### CHANNEL PORTFOLIO MANAGEMENT #########################

/*
Q)Gsearch WAS DOING WELL SO ANOTHER PAID CHANNEL 'BSEARCH' WAS LAUNCHED AROUND AUG 22
PULL IN THE SESSIONS FOR BOTH CHANNELS
(requested on - 29th nov 2012)
*/

SELECT 
MIN(DATE(CREATED_AT)) AS WEEK_START_DATE,
-- YEAR(DATE(CREATED_AT)) AS YR,
-- MONTH(DATE(CREATED_AT)) AS MTH,
COUNT(CASE WHEN UTM_SOURCE = 'gsearch' THEN 1 ELSE NULL END) AS GSEARCH_SESSIONS,
COUNT(CASE WHEN UTM_SOURCE = 'bsearch' THEN 1 ELSE NULL END) AS BSEARCH_SESSIONS
FROM WEBSITE_SESSIONS
WHERE CREATED_AT BETWEEN '2012-08-22' AND '2012-11-29' AND UTM_CAMPAIGN = 'nonbrand'
GROUP BY WEEK(CREATED_AT);
-- OBSERVATIONS - SESSIONS COMING IN FROM BSEARCH ARE A THIRD OF SESSIONS FROM GSEARCH

/*
Q)COMPARE THE GSEARCH AND BSEARCH % OF SESSIONS COMING IN FROM MOBILE
(requested on - 30th nov 2012)
*/

SELECT 
	UTM_SOURCE,
    COUNT(DISTINCT WEBSITE_SESSION_ID) AS TOTAL_SESSIONS,
    COUNT( CASE WHEN DEVICE_TYPE='mobile' THEN 1 ELSE NULL END) AS MOBILE_SESSIONS,
    COUNT(CASE WHEN DEVICE_TYPE='mobile' THEN 1 ELSE NULL END)*100/COUNT(DISTINCT WEBSITE_SESSION_ID) AS MOBILE_PCT
FROM WEBSITE_SESSIONS
WHERE CREATED_AT BETWEEN '2012-08-22' AND '2012-11-30' AND UTM_CAMPAIGN = 'nonbrand'
GROUP BY 1;

-- OBSERVATIONS - SESSIONS COMING IN FROM BSEARCH HAVE LESS % COMING IN FROM MOBILE WHEN COMPARED TO GSEARCH MOBILE SESSIONS

/*
Q) CROSS CHANNEL BID OPTIMIZATION ->
BUSINESS WANTS TO UNDERSTAND IF BIDDING THE SAME FOR GSEARCH AND BSEARCH MAKES SENSE OR NOT
AND THE BEST WAY TO ASSESS THAT IS LOOKING AT CONVERSION RATES FOR BOTH
(REQUESTED ON 18TH SEPT)
*/

SELECT
	W.DEVICE_TYPE,
    W.UTM_SOURCE,
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS,
    COUNT(DISTINCT O.ORDER_ID)*100/COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS CONV_RATE
FROM WEBSITE_SESSIONS W
LEFT JOIN ORDERS O
ON O.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
WHERE W.CREATED_AT BETWEEN '2012-08-22' AND '2012-09-18' AND W.UTM_CAMPAIGN = 'nonbrand'
GROUP BY 1,2;
-- OBSERVATIONS - AS WE CAN SEE SESSIONS COMING IN FROM BSEARCH HAVE LESSER CONV RATES
-- THAN GSEARCH FOR BOTH DEVICE TYPE SESSIONS SO IT'S REASONABLE TO BID DOWN FOR BSEARCH 
-- TO OPTIMIZE OUR MARKETING SPEND

/*
Q) TO SEE IF OUR BRAND IS BUILDING MOMENTUM IN THE MARKET ITS IDEAL TO LOOK AT 
DIRECT TYPE IN AND ORGANIC SESSIONS OVER A PERIOD OF TIME
*/




######################### ANALYSING SEASONALITY #########################

-- UNDERSTANDING THIS HELPS BUSINESS TO PLAN FOR SEASONS AND PREPARE BETTER FOR THE DEMAND 
-- ALSO DAY-PARTING ANALYSIS HELPS US TO PLAN THE STAFF FOR DIFFERENT TIMES IN THE DAY

-- PULL MONTHLY AND WEEKLY TRENDS FOR SESSIONS AND ORDER VOLUME TO UNDERSTAND SEASONALITY AT BOTH LEVELS
SELECT 
	YEAR(W.CREATED_AT) AS YR,
    MONTH(W.CREATED_AT) AS MTH,
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS
FROM WEBSITE_SESSIONS W
LEFT JOIN ORDERS O
ON O.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
WHERE YEAR(W.CREATED_AT) = 2012
GROUP BY 1,2;
-- OBSERVATIONS - > WE CAN SEE THAT NOVEMBER ACCOUNTS FOR THE MOST SESSIONS AND ORDERS
-- INDICATING SOME SALES PROBABLY BLACK FRIDAY LET'S CHECK THAT AT MORE GRANULAR LEVEL 
-- WITH A WEEKLY TREND

SELECT 
	YEAR(W.CREATED_AT) AS YR,
    WEEK(W.CREATED_AT) AS MTH,
    MIN(DATE(W.CREATED_AT)) AS WEEK_START,
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS
FROM WEBSITE_SESSIONS W
LEFT JOIN ORDERS O
ON O.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
WHERE YEAR(W.CREATED_AT) = 2012
GROUP BY 1,2;
-- HERE WE CAN SEE WEK STARTING AT 18TH NOV AND 25TH NOV HAS SOME CRAZY HIGH VOLUMES

######################### DAY PARTING ANALYSIS #########################
/*
IT'S A GOOD IDEA TO UNDERSTAND AVERAGE SESSIONS FOR EACH DAY OF A WEEK WITH RESPECT TO 
TIME (EACH HOUR) SO WE COULD ALLOCATE STAFF FOR OUR WEBSITE APPROPRIATELY
TIME PERIOD CONSIDERED - 15 SEP 2012 TO 15 NOV 2012
*/


WITH _FILTERED_TABLE AS (
SELECT 
	DATE(CREATED_AT) AS _DATE, 
    WEEKDAY(CREATED_AT) AS _WEEKDAY,
    HOUR(CREATED_AT) AS _HOUR,
    COUNT(WEBSITE_SESSION_ID) AS SESSIONS
FROM WEBSITE_SESSIONS
WHERE CREATED_AT BETWEEN '2012-09-15' AND '2012-11-15'
GROUP BY 1,2,3
ORDER BY 1,2,3
)
SELECT 

	_HOUR,
    AVG(CASE WHEN _WEEKDAY = 1 THEN SESSIONS ELSE NULL END) AS 'mon',
    AVG(CASE WHEN _WEEKDAY = 2 THEN SESSIONS ELSE NULL END) AS 'tue',
    AVG(CASE WHEN _WEEKDAY = 3 THEN SESSIONS ELSE NULL END) AS 'wed',
    AVG(CASE WHEN _WEEKDAY = 4 THEN SESSIONS ELSE NULL END) AS 'thu',
    AVG(CASE WHEN _WEEKDAY = 5 THEN SESSIONS ELSE NULL END) AS 'fri',
    AVG(CASE WHEN _WEEKDAY = 6 THEN SESSIONS ELSE NULL END) AS 'sat',
    AVG(CASE WHEN _WEEKDAY = 0 THEN SESSIONS ELSE NULL END) AS 'sun'

FROM _FILTERED_TABLE    
GROUP BY 1;

    
######################### PRODUCT LEVEL ANALYSIS #########################
/*
IT'S A GOOD IDEA TO LOOK AT PRODUCT LEVEL PERFORMANCE TO FURTHER OPTIMIZE ON MARGINS, LOOK AT PRODUCTS WHICH RETURN THE MOST TO IDENTIFY QUALITY ISSUES 
AND MUCH MORE, IDENTIFY CONVERSION RATES FOR EACH PRODUCT IN ACTION  
*/
    
-- LETS GET A SENSE OF REVENUE, MARGIN AND SALES FOR 
-- THE ONLY PRODUCT WE SELL AS OF NOW SO WE COULD PLAN ON LAUNCHING A NEW PRODUCT IN THE FUTURE
-- THIS WILL ALSO SERVE AS A BASELINE DATA SO WE CAN SEE HOW REVENUE AND MARGIN EVOLVE AS WE LAUNCH A NEW PRODUCT

SELECT *
-- DISTINCT PRIMARY_PRODUCT_ID
FROM ORDERS
WHERE CREATED_AT < '2013-01-04';
    
SELECT 

	YEAR(CREATED_AT) AS YR,
    MONTH(CREATED_AT) AS MTH,
    COUNT(ORDER_ID) AS SALES,
    SUM(PRICE_USD) AS REVENUE,
    SUM(PRICE_USD-COGS_USD) AS MARGIN

FROM ORDERS
WHERE CREATED_AT < '2013-01-04'
GROUP BY 1,2
;
/*
NOT ALL PRODUCTS CONVERT TO SALES EQUALLY SOME WILL HAVE A BETTER CTR AND WE MIGHT ALSO WANT
TO UNDERSTAND HOW LAUNCH OF A NEW PRODUCT IMPACTS CTR FOR OTHER PRODUCTS AS
IT MAY OVERWHELM THE CUSTOMERS 
*/

SELECT 
	* 
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT BETWEEN '2013-01-01' AND '2013-03-01';

SELECT 
    
    P.PAGEVIEW_URL,
    COUNT(P.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(O.WEBSITE_SESSION_ID) AS ORDERS

FROM WEBSITE_PAGEVIEWS P 
LEFT JOIN ORDERS O 
ON O.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE P.CREATED_AT BETWEEN '2013-02-01' AND '2013-03-01'
AND P.PAGEVIEW_URL IN ('/the-original-mr-fuzzy','/the-forever-love-bear')
GROUP BY 1;



/*
NOW LET'S LOOK AT OUR WEBSITE METRICS BEFORE AND AFTER THE NEW LOVE BEAR PRODUCT LAUNCH (6TH JAN)
*/

-- STEP-1 - FILTER ON SESSIONS THAT HAS SEEN PRODUCTS PAGE 


CREATE TEMPORARY TABLE PRODUCTS_TIME_PERIOD AS 
SELECT 

	WEBSITE_SESSION_ID,
    WEBSITE_PAGEVIEW_ID,
	CREATED_AT,
    CASE WHEN CREATED_AT < '2013-01-06' THEN 'A. BEFORE NEW PRODUCT'
		 WHEN CREATED_AT >= '2013-01-06' THEN 'B. POST NEW PRODUCT'
         ELSE 'UH OH..... CHECK LOGIC' 
	END AS TIME_PERIOD
    
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT BETWEEN '2012-10-01' AND '2013-04-01'  
AND PAGEVIEW_URL = '/products'
;
-- STEP - 2 -> LETS GET TO THE NEXT PAGE, WHETHER THESE SESSIONS HAVE VIEWED ANY OTHER PAGE AFTER PRODUCTS PAGE OR NOT

CREATE TEMPORARY TABLE WITH_NEXT_PAGE AS 
SELECT 
	P.TIME_PERIOD,
    P.WEBSITE_SESSION_ID,
    WEBSITE_PAGEVIEWS.WEBSITE_PAGEVIEW_ID
FROM PRODUCTS_TIME_PERIOD P 
LEFT JOIN WEBSITE_PAGEVIEWS 
ON WEBSITE_PAGEVIEWS.WEBSITE_PAGEVIEW_ID > P.WEBSITE_PAGEVIEW_ID
AND WEBSITE_PAGEVIEWS.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
;

WITH FINAL_TABLE AS(
SELECT 
	W.*,
    CASE WHEN P.PAGEVIEW_URL ='/the-original-mr-fuzzy' THEN P.WEBSITE_PAGEVIEW_ID ELSE NULL END AS MR_FUZZY_SEEN,
    CASE WHEN P.PAGEVIEW_URL ='/the-forever-love-bear' THEN P.WEBSITE_PAGEVIEW_ID ELSE NULL END AS LOVE_BEAR_SEEN
FROM WITH_NEXT_PAGE W 
LEFT JOIN WEBSITE_PAGEVIEWS P 
ON P.WEBSITE_PAGEVIEW_ID = W.WEBSITE_PAGEVIEW_ID
 )
 SELECT 
	TIME_PERIOD,
    COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSIONS_TO_PRODUCTS,
    COUNT(DISTINCT WEBSITE_PAGEVIEW_ID) AS SESSIONS_WITH_NEXT_PAGE,
    COUNT(DISTINCT MR_FUZZY_SEEN) AS SESSIONS_THAT_SAW_FUZZY,
	COUNT(DISTINCT LOVE_BEAR_SEEN) AS SESSIONS_THAT_SAW_LOVE_BEAR
FROM FINAL_TABLE
GROUP BY 1
;

-- LET'S GET CONVERSION FUNNEL OF BOTH THE PRODUCTS THIS WOULD HELP US UNDERSTAND IF
-- ONE PRODUCT CONVERTS BETTER THAN THE OTHER

-- LET'S GET ALL THE SESSION ID WHICH HAS SEEN THESE TWO PAGES

CREATE TEMPORARY TABLE _BEARS
SELECT 
	*
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT >= '2013-01-06' AND CREATED_AT <= '2013-04-10'
AND PAGEVIEW_URL IN ('/the-original-mr-fuzzy','/the-forever-love-bear')
;

CREATE TEMPORARY TABLE _WITH_PAGES
SELECT 
	B.WEBSITE_SESSION_ID,
    B.PAGEVIEW_URL,
    P.PAGEVIEW_URL AS NEXT_PAGE
FROM _BEARS B 
LEFT JOIN WEBSITE_PAGEVIEWS P 
ON P.WEBSITE_SESSION_ID = B.WEBSITE_SESSION_ID AND B.WEBSITE_PAGEVIEW_ID < P.WEBSITE_PAGEVIEW_ID
;

WITH FILTERED_TABLE AS (
SELECT
	WEBSITE_SESSION_ID,
    PAGEVIEW_URL,
    CASE WHEN NEXT_PAGE = '/cart' THEN 1 ELSE 0 END AS CART_SEEN,
    CASE WHEN NEXT_PAGE = '/shipping' THEN 1 ELSE 0 END AS SHIPPING_SEEN,
    CASE WHEN NEXT_PAGE = '/billing-2' THEN 1 ELSE 0 END AS BILLING_SEEN,
    CASE WHEN NEXT_PAGE = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS THANKYOU_SEEN
FROM _WITH_PAGES
 )
 ,
 LAST_TABLE AS
 (
 SELECT 
	WEBSITE_SESSION_ID,
	PAGEVIEW_URL,
    MAX(CART_SEEN) AS CART_FLAG,
    MAX(SHIPPING_SEEN) AS SHIPPING_FLAG,
    MAX(BILLING_SEEN) AS BILLING_FLAG,
    MAX(THANKYOU_SEEN) AS THANKYOU_FLAG
FROM FILTERED_TABLE
GROUP BY 1,2
)
SELECT 
	PAGEVIEW_URL AS PRODUCT,
    COUNT(WEBSITE_SESSION_ID) AS SESSIONS,
    SUM(CART_FLAG) AS SESSIONS_TO_CART,
    SUM(SHIPPING_FLAG) AS SESSIONS_TO_SHIPPING,
    SUM(BILLING_FLAG) AS SESSIONS_TO_BILLING,
    SUM(THANKYOU_FLAG) AS SESSIONS_TO_THANKYOU
FROM LAST_TABLE
GROUP BY 1
;

######################### CROSS SELLING ANALYSIS #########################
/*
WHEN WE ARE ABLE TO CROSS SELL MORE ADDITIONAL ITEMS TO OUR CUSTOMERS THEN WE ARE ABLE TO CAPTURE
MORE REVENUE PER ORDER FROM THAT CUSTOMER, ALSO IT HELPS THE BUSINESS 
TO IDENTIFY WHAT PRODUCTS TO RECOMMEND TOGETHER
*/

-- SELECT * FROM ORDERS
-- WHERE ORDER_ID BETWEEN 10000 AND 11000;

--  LET'S RETURN ALL THOSE ORDERS WHICH HAD MULTIPLE ITEMS IN IT

SELECT * FROM ORDER_ITEMS
WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM ORDER_ITEMS GROUP BY 1 HAVING COUNT(*) > 1)
ORDER BY ORDER_ID ;

SELECT 
	-- O.ORDER_ID,
    O.PRIMARY_PRODUCT_ID,
   --  I.PRODUCT_ID AS CROSS_PRODUCT_ID,
    COUNT(DISTINCT CASE WHEN I.PRODUCT_ID = 1 THEN O.ORDER_ID ELSE NULL END) AS X_SELL_PROD1,
    COUNT(DISTINCT CASE WHEN I.PRODUCT_ID = 2 THEN O.ORDER_ID ELSE NULL END) AS X_SELL_PROD2,
    COUNT(DISTINCT CASE WHEN I.PRODUCT_ID = 3 THEN O.ORDER_ID ELSE NULL END) AS X_SELL_PROD3
FROM ORDERS O 
LEFT JOIN ORDER_ITEMS I
ON O.ORDER_ID = I.ORDER_ID
AND I.IS_PRIMARY_ITEM = 0
WHERE O.ORDER_ID BETWEEN 10000 AND 11000
GROUP BY 1
ORDER BY 1
;

/*
IT'S GOOD IDEA TO ANALYSE OUR EXISTING METRICS BEFORE AND AFTER IMPLEMENTATION 
OF CROSS SELL (RECOMMENDATIONS) ON THE CART PAGE TO SEE IF IT DOES HELP IN BRINGING UP THE AVG ORDER VALUE
RECOMMENDATION FEATURE WAS ADDED ON 25TH SEPT
*/

-- SELECT * FROM WEBSITE_SESSIONS;
-- SELECT * FROM WEBSITE_PAGEVIEWS;
-- SELECT * FROM ORDERS;
-- SELECT * FROM ORDER_ITEMS;

## PART A

CREATE TEMPORARY TABLE CART_SESSIONS
SELECT 
	WEBSITE_SESSION_ID,
    WEBSITE_PAGEVIEW_ID,
    CREATED_AT,
    CASE WHEN CREATED_AT BETWEEN '2013-08-25' AND '2013-09-25' THEN 'A.PRE_X_SELL' 
		 WHEN CREATED_AT BETWEEN '2013-09-25' AND '2013-10-25' THEN 'B.POST_X_SELL'
         ELSE 'CHECK LOGIC....'
         END AS TIME_PERIOD
	FROM WEBSITE_PAGEVIEWS
    WHERE PAGEVIEW_URL = '/cart'AND CREATED_AT BETWEEN '2013-08-25' AND '2013-10-25';

SELECT * FROM CART_SESSIONS;

CREATE TEMPORARY TABLE PART_A
SELECT 
	C.TIME_PERIOD,
    COUNT(DISTINCT C.WEBSITE_SESSION_ID) AS CART_SESSIONS,
    COUNT(DISTINCT P.WEBSITE_SESSION_ID) AS SESSIONS_AFTER_CART,
    ROUND(COUNT(DISTINCT P.WEBSITE_SESSION_ID)*100.0/COUNT(DISTINCT C.WEBSITE_SESSION_ID),2) AS CART_CTR
FROM CART_SESSIONS C 
LEFT JOIN WEBSITE_PAGEVIEWS P 
ON P.WEBSITE_SESSION_ID = C.WEBSITE_SESSION_ID
AND P.WEBSITE_PAGEVIEW_ID > C.WEBSITE_PAGEVIEW_ID
GROUP BY 1

## PART B

-- SELECT * FROM WEBSITE_SESSIONS;
-- SELECT * FROM WEBSITE_PAGEVIEWS;
-- SELECT * FROM ORDERS;
-- SELECT * FROM ORDER_ITEMS;

CREATE TEMPORARY TABLE ORDER_ITEMS_TIME_PERIOD
 SELECT 
	*,
    CASE WHEN CREATED_AT BETWEEN '2013-08-25' AND '2013-09-25' THEN 'A.PRE_X_SELL' 
		 WHEN CREATED_AT BETWEEN '2013-09-25' AND '2013-10-25' THEN 'B.POST_X_SELL'
         ELSE 'CHECK LOGIC....'
         END AS TIME_PERIOD
	FROM ORDER_ITEMS
    WHERE CREATED_AT BETWEEN '2013-08-25' AND '2013-10-25';

CREATE TEMPORARY TABLE ORDER_ATTRIBUTES
SELECT 
	ORDER_ID,
	COUNT(DISTINCT PRODUCT_ID) AS PRODUCTS,
    COUNT(DISTINCT ORDER_ID) AS ORDERS,
    SUM(PRICE_USD) AS TOTAL_REVENUE
FROM ORDER_ITEMS_TIME_PERIOD
GROUP BY 1
;

CREATE TEMPORARY TABLE PART_B
SELECT
	OI.TIME_PERIOD,
    COUNT(OI.PRODUCT_ID)*1.0/COUNT(DISTINCT ORDER_ID) AS PRODUCTS_PER_ORDER,
    SUM(OI.PRICE_USD)*1.0/COUNT(DISTINCT ORDER_ID) AS AVG_ORDER_VALUE,
    SUM(OI.PRICE_USD) AS TOTAL_REVENUE
    FROM ORDER_ITEMS_TIME_PERIOD OI
GROUP BY 1

SELECT
	A.*,
    B.*,
    ROUND(B.TOTAL_REVENUE*1.0/A.CART_SESSIONS,2) AS REVENUE_PER_CART_SESSION
FROM PART_A A 
INNER JOIN PART_B B
ON A.TIME_PERIOD = B.TIME_PERIOD


/*
PRODUCT REFUND ANALYSIS WILL HELP US UNDERSTAND OUR PERCEPTION OF PRODUCTS FROM CUSTOMER'S LENS
IF THE REFUND RATE INCREASES TO A SIGNIFICANT PROPORTION IT IMPACTS BRAND IMAGE AS WELL AS MARGINS
AS THERE IS COST ASSOCIATED WITH LOGISTICS AND TRANSPORTATION 
ALSO IT DIRECTS ATTENTION TOWARDS PRODUCTS THAT MAY NEED ATTENTION
*/

/* 
LET'S PULL MONTHLY TRENDS OF PRODUCTS TILL OCTOBER 2014 SINCE THE INCEPTION OF THE BUSINESS
AS OUR SUPPLIER HAD SOME ISSUE EARLIER WHICH WAS EVEN AGGRAVED IN 2014 AROUND AUG/SEP	
*/
SELECT * FROM ORDER_ITEMS;

SELECT 
	YEAR(I.CREATED_AT) AS YR,
    MONTH(I.CREATED_AT) AS MTH,
    COUNT(CASE WHEN I.PRODUCT_ID = 1 THEN I.ORDER_ITEM_ID ELSE NULL END) AS P1_ORDERS,
    COUNT(CASE WHEN I.PRODUCT_ID = 1 THEN R.ORDER_ITEM_ID ELSE NULL END) AS P1_REFUNDS,
    COUNT(CASE WHEN I.PRODUCT_ID = 1 THEN R.ORDER_ITEM_ID ELSE NULL END)*100.0/
    COUNT(CASE WHEN I.PRODUCT_ID = 1 THEN I.ORDER_ITEM_ID ELSE NULL END) AS REFUND_RATE
FROM ORDER_ITEMS I 
LEFT JOIN ORDER_ITEM_REFUNDS R 
ON R.ORDER_ITEM_ID = I.ORDER_ITEM_ID
WHERE I.CREATED_AT< '2014-10-15'
GROUP BY 1,2
;
SELECT * FROM ORDER_ITEM_REFUNDS;

######################################### USER ANALYSIS #########################################

/*
IT'S GREAT TO ANALYSE THE USER PATTERNS FOR OUR WEBSITE THIS CAN HELP US TO MAKE BUSINESS STRATEGIES, 
PROMOTIONAL STRATEGIES AND MUCH MORE
ITS A GOOD IDEA TO SEE HOW MANY SESSIONS DOES USERS HAVE AND BUCKET THEM TOO
AS A TEST TO UNDERSTAND PATTERNS, WE CAN DO IT TILL NOVEMBER 2014
*/


WITH USER_SESSIONS AS(
SELECT 
	USER_ID,
    COUNT(WEBSITE_SESSION_ID) AS SESSIONS
FROM WEBSITE_SESSIONS
WHERE CREATED_AT BETWEEN '2014-01-01' AND '2014-11-01'
GROUP BY 1
)
SELECT 
	SESSIONS,
    COUNT(DISTINCT USER_ID) AS NO_OF_USERS
FROM USER_SESSIONS
GROUP BY 1;

-- LET'S GET THE MIN, MAX AND AVG TIME BETWEEN THE FIRST TWO SESSIONS FOR CUSTOMERS (ytd 2014 TILL 3rd NOV)

WITH FIRST_AND_SECOND_SESSIONS AS (
SELECT 
	S.USER_ID,
    MIN(S.CREATED_AT) AS FIRST_TIME,
    MIN(N.CREATED_AT) AS SECOND_TIME,
    DATEDIFF(MIN(N.CREATED_AT),MIN(S.CREATED_AT)) AS DAYS_BETWEEN
FROM WEBSITE_SESSIONS S 
LEFT JOIN WEBSITE_SESSIONS N 
ON N.USER_ID = S.USER_ID
AND S.CREATED_AT < N.CREATED_AT
WHERE S.CREATED_AT BETWEEN '2014-01-01' AND '2014-11-03'
GROUP BY 1
)
SELECT 
	AVG(DAYS_BETWEEN),
    MAX(DAYS_BETWEEN),
	MIN(DAYS_BETWEEN)
FROM FIRST_AND_SECOND_SESSIONS
;
/* DATA TELLS US THAT ON AVERAGE OUR CUSTOMER COMES BACK AFTER A MONTH */

/*
IT'S REASONABLE TO EXPECT THAT CONVERSION RATES AND AVERAGE ORDER VALUE COULD BE HIGHER FOR REPEAT SESSIONS
LET'S TRY TO VALIDATE THAT TILL 8TH NOVEM 2014
*/

SELECT 

	-- S.WEBSITE_SESSION_ID,
    S.IS_REPEAT_SESSION,
    COUNT(DISTINCT S.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS,
    COUNT(DISTINCT O.ORDER_ID)*100.0/COUNT(S.WEBSITE_SESSION_ID) AS CONV_RATE,
    SUM(O.PRICE_USD)*1.0/COUNT(S.WEBSITE_SESSION_ID) AS REVENUE_PER_SESSION
    
FROM WEBSITE_SESSIONS S
LEFT JOIN ORDERS O 
ON O.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID 
WHERE S.CREATED_AT BETWEEN '2014-01-01' AND '2014-11-08'
GROUP BY 1

-- LOOKS LIKE OUR HYPOTHESIS WAS CORRECT AS CONV_RATE IS HIGHER FOR REPEAT SESSIONS AND SO IS REVENU_PER_SESSIONS
